import java.util.List;


/**
 * <p>类{@code Role}是角色类，分为英雄和小兵
 * @author luoZH
 * <br>拥有属性：经验值，英雄名，英雄位置最大魔法值，最大生命值，魔法值和生命力和技能大招
 * <br>拥有方法：get_name,get_x,get_y,update_location,get_Hp,update_HP
 * get_Mp,update_MP,Move,Defense,IsDeath
 * 
 * @since 2018/10/20
 */

public class Role {
	
	static int n=30,m=50;
	List<Skill> skill;
	/**
	 * <p>创建角色的技能链表，小兵没有技能
	 */

	static int HP,MP,Exp;
	static int MaxHP,MaxMP;
	char name;
	static int x,y;
	/**
	 * <p>创建每个角色时，给初始化生命值HP、魔法值MP、经验值Exp，以及英雄的生成地点英雄的名称
	 */
	Role(int Mhp,int Mmp,int xx,int yy,char c)
	{		
		HP=MaxHP=Mhp;
		MP=MaxMP=Mmp;
		x=xx;
		y=yy;
		Exp=0;
		name=c;
		//System.out.printf("over creat the hero\n");
	}
	/**
	 * <p>返回英雄的名称
	 */
	char get_name()
	{
		return name;
	}
	/**
	 * <p>返回英雄的位置横坐标
	 */

	int get_x()
	{
		return x;
	}
	/**
	 * <p>返回英雄的位置纵坐标
	 */

	int get_y()
	{
		return y;
	}
	/**
	 * <p>更新英雄位置
	 * @param x 横坐标
	 * @param y 纵坐标
	 */
	void update_location(int xx,int yy)
	{
		x=xx;y=yy;
	}
	/**
	 * <p>获取英雄当前生命值
	 */
	int get_Hp()
	{
		return HP;
	}
	/**
	 * <p>更新英雄当前生命值
	 * @param hp 英雄当前生命值
	 */
	void update_HP(int hp)
	{
		HP-=hp;
	}
	/**
	 * <p>获取英雄当前魔法值
	 */
	int get_Mp()
	{
		return MP;
	}
	/**
	 * <p>更新英雄当前魔法值
	 * @param mp 英雄当前魔法值
	 */
	void update_MP(int mp)
	{
		MP-=mp;
	}
	/**
	 * <p>对英雄的移动进行上下左右移动，移动成功返回true，碰到障碍物或越界返回false
	 * @param s 英雄移动操作名称
	 */
	boolean Move(String s)
	{
		System.out.println(s);
		//String s1="Up";
		if(s.equals("U"))
		{
			if(x>0)
			{
				x-=1;return true;//System.out.printf("X:%d\n",x);
			}
			else
				return false;
		}
		else if(s.equals("D"))//
		{
			if((x+1)<n)
				x+=1;
			else
				return false;
		}
		else if(s.equals("L"))
		{
			if(y>0)
				y-=1;
			else
				return false;
		}
		else if(s.equals("R"))//
		{
			if((y+1)<m)
				y+=1;
			else
				return false;
		}
		return false;
	}
	/**
	 * <p>英雄防卫操作
	 */
	boolean Defense()
	{
		if(HP<MaxHP)
		{
			HP++;
			return true;
		}
		return false;
	}
	/**
	 * <p>判断英雄是否死亡
	 */
	boolean IsDeath()
	{
		if(HP<=0)
			return true;
		return false;
	}
}

/**
 * <p>类{@code Soldier}是士兵类，继承了角色类，用I表示，生命值为10，魔法为0
 * <br>拥有属性：经验值，英雄名，英雄位置最大魔法值，最大生命值，魔法值和生命力和技能大招
 * <br>拥有方法：init_map，show_of_battlefield，creat_hero，move_hero，attack，game_over,quick_escape,boom
 * @author luoZH
 * @since 2018/10/20
 */
class Soldier extends Role
{
	Soldier(int Mhp,int Mmp,int xx,int yy,char c)
	{
		//MP=0;EXP=0;
		super(Mhp,Mmp,xx,yy,c);
		//super(hp,mp);

	}
	
}

/**
 * <p>类{@code Soldier}是法师类，继承了角色类
 * <br>拥有属性：经验值，英雄名，英雄位置最大魔法值，最大生命值，魔法值和生命力和技能大招
 * <br>拥有方法：init_map，show_of_battlefield，creat_hero，move_hero，attack，game_over,quick_escape,boom
 * @author luoZH
 * @since 2018/10/20
 */
class Master extends Role
{
	Master(int Mhp,int Mmp,int xx,int yy,char c)
	{
		//MP=0;EXP=0;
		super(Mhp,Mmp,xx,yy,c);
		//super(hp,mp);

	}
}
/**
 * <p>类{@code Soldier}是战士类，继承了角色类
 * <br>拥有属性：经验值，英雄名，英雄位置最大魔法值，最大生命值，魔法值和生命力和技能大招
 * <br>拥有方法：init_map，show_of_battlefield，creat_hero，move_hero，attack，game_over,quick_escape,boom
 * @author luoZH
 * @since 2018/10/20
 */
class Combatant extends Role
{
	Combatant(int Mhp,int Mmp,int xx,int yy,char c)
	{
		//MP=0;EXP=0;
		super(Mhp,Mmp,xx,yy,c);
		//super(hp,mp);

	}
}
